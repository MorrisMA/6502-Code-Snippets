;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Copyright 2012 by Michael A. Morris, dba M. A. Morris & Associates
;;
;;  All rights reserved. The source code contained herein is publicly released
;;  under the terms and conditions of the GNU Lesser Public License. No part of
;;  this source code may be reproduced or transmitted in any form or by any
;;  means, electronic or mechanical, including photocopying, recording, or any
;;  information storage and retrieval system in violation of the license under
;;  which the source code is released.
;;
;;  The souce code contained herein is free; it may be redistributed and/or 
;;  modified in accordance with the terms of the GNU Lesser General Public
;;  License as published by the Free Software Foundation; either version 2.1 of
;;  the GNU Lesser General Public License, or any later version.
;;
;;  The souce code contained herein is freely released WITHOUT ANY WARRANTY;
;;  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
;;  PARTICULAR PURPOSE. (Refer to the GNU Lesser General Public License for
;;  more details.)
;;
;;  A copy of the GNU Lesser General Public License should have been received
;;  along with the source code contained herein; if not, a copy can be obtained
;;  by writing to:
;;
;;  Free Software Foundation, Inc.
;;  51 Franklin Street, Fifth Floor
;;  Boston, MA  02110-1301 USA
;;
;;  Further, no use of this source code is permitted in any form or means
;;  without inclusion of this banner prominently in any derived works. 
;;
;;  Michael A. Morris
;;  Huntsville, AL
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; #------------------------------------------------------------------------#
;; |                                                                        |
;; |   SMul8x8a.A65                                                         |
;; |                                                                        |
;; |   Test for subroutine smul8x8 stack-based 8x8 Booth multiplication     |       
;; |                                                                        |
;; |   Copyright 2012, Michael A. Morris                                    |
;; |                                                                        |
;; #------------------------------------------------------------------------#
;;
;; File created 24-Dec-2012
;;
        title   "SMul8x8a.a65 Test Program"
;;
        bss
        org $00FC
        
TV_Cnt: ds  1                   ;; Number of test vectors in table
TV_Off: ds  1                   ;; Offset into test vector table
LSB:    ds  1                   ;; LSB product (returned in Y)
MSB:    ds  1                   ;; MSB product (returned in X)

        code
        org $F800

Start:  stz TV_Off              ;; initialize offset into test vector 
        lda TV_Len              ;; initialize test vector count in zp
        sta TV_Cnt
        stz LSB                 ;; initialize test vector product values
        stz MSB

Tst_Lp: lda TV_Off              ;; load current test vector table offset
        tax
        
        lda TV_Tbl,x            ;; move LSB of product at offset to zp
        sta LSB
        
        inx                     ;; increment test vector table offset
        
        lda TV_Tbl,x            ;; move MSB of product at offset to zp
        sta MSB
        
        inx
        
        lda TV_Tbl,x            ;; load multiplier into Y
        tay
        
        inx                     ;; increment test vector table offset
        
        lda TV_Tbl,x            ;; load multiplier into A
        
        inx                     ;; increment test vector table offset
        
        pha                     ;; temporarily save multiplier on stack
        txa                     ;; load offset into A
        sta TV_Off              ;; save test pointer offset in zp
        
        pla                     ;; restore multiplicand to A and transfer to X
        tax
        
        lda #170                ;; initialize A with a value
        
        jsr smul8x8

        cmp #170                ;; ensure A unmodified by subroutine
        bne $

        tya                     ;; load computed LSB into A and compare w/ zp
        cmp LSB
        bne $
        
        txa                     ;; load computed MSB into A and compare w/ zp
        cmp MSB
        bne $
        
        dec TV_Cnt              ;; decrement test vector count, loop <> 00FC    
        bne Tst_Lp

        jmp Start               ;; re-run - Verilog test bench stops on re-start
        
        align 8

TV_Len: db  ((TV_End-TV_Tbl)/4) ;; compute number of test vectors in table
        ds  3
TV_Tbl: dw  -126*-128           ;; Product
        db  -126                ;; Multiplier; shift, -1, 1, 4 shift, -1
        db  -128                ;; Multiplicand
        
;;
        dw  -127*-128
        db  -127                ;; -1, 1, 5 shifts, -1
        db  -128
;;
        dw  -128*-128
        db  -128                ;; 7 shifts, -1
        db  -128
;;
        dw  -128*-127
        db  -128                ;; 7 shifts, -1
        db  -127
;;
        dw  -128*-126
        db  -128                ;; 7 shifts, -1
        db  -126
;;
        dw  126*-128
        db  126                 ;; shift, -1, 5 shifts, 1
        db  -128
;;
        dw  127*-128
        db  127                 ;; -1, 6 shifts, 1
        db  -128
;;
        dw  -86*127
        db  -86                 ;; shift, -1, 1, -1, 1, -1, 1, -1 
        db  127
;;
        dw  85*-86
        db  85                  ;; -1, 1, -1, 1, -1, 1, -1, 1 
        db  -86
;;
        dw  0*127
        db  0                   ;; 8 shifts
        db  127
;;
        dw  127*0
        db  127                 ;; -1, 6 shifts, 1
        db  0
;;
        dw  1*-1
        db  1                   ;; -1, 1, 6 shifts
        db  -1
;;
        dw  -1*1
        db  -1                  ;; -1, 7 shifts
        db  1
;;
        dw  -1*-1
        db  -1                  ;; -1, 7 shifts
        db  -1
;;
        dw  51*-52              ;; 0x33 * 0xCC
        db  51                  ;; -1, shift, 1, shift, -1, shift, 1, shift 
        db  -52
;;
        dw  -52*51              ;; 0xCC * 0x33
        db  -52                  ;; -1, shift, 1, shift, -1, shift, 1, shift 
        db  51
;;
TV_End:
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Signed Multiply: 8 x 8 => 16
;;
;;  The subroutine performs a signed multiply using working registers allocated
;;  on the stack. The multiplicand is provided in X, and the multiplier in Y.
;;  Booth multiplication algorithm is used to provide the 16-bit 2's complement
;;  result. The MSB is returned in X, and the LSB is returned in Y. The accumu-
;;  lator is preserved, but not the PSW, P.
;;
;;  The subroutine uses the following stack variables:
;;
;;  X Offset    Size    Order       Name            Comments
;;  $107        8       -           Saved_Acc       Saved Accumulator
;;  $104-$106   24      Big-Endian  Product         Product      - 16:0
;;  $102-$103   16      Big-Endian  Multiplicand    Multiplicand -  8:0
;;  $101        8       -           Cntr            Loop Counter -  7:0
;;
;;  Booth multiplication algorithm handles 2'C integers. Howewer, to protect
;;  against numeric overflow when the partial products are being summed, the
;;  algorithm requires an extension to the sign bit of the multiplicand and of
;;  the product register. Thus, an extra byte has been allocated on the stack to
;;  hold the sign extension bit for the product and for the multiplicand.
;;
;;  The required operation, add+shift, subtract+shift, or shift-only, is deter-
;;  mined using an extension to the multiplier. Since that extension would re-
;;  quire an additional register, and there are none to spare for just a single
;;  bit. Further, the objective is a subroutine without page zero or data memory
;;  allocations. Thus, a virtual 9-bit register is constructed for the multi-
;;  plier using the Y register to hold 8 bits, and the C flag for the other.
;;
;;  At the start of the loop, the Booth algorithm initializes the Booth multi-
;;  plier guard bit to 0 using CLC and then rotates the lsb of the multiplier
;;  into the C flag and the initial guard bit into the msb of the multiplier.
;;  Thus, the BPL branch instruction is used to determine the state of the
;;  Booth multiplier guard bit, and a BCS/BCC branch is used to check the state
;;  of the multiplier's lsb in the C flag.
;;
;;  There are four conditions, and so there are four sections of code into which
;;  the subroutine is divided. There are two sub-blocks in the Add_M block which
;;  is selected if the Booth multiplier guard bit is set, and there are two sub-
;;  blocks in the Sub_M block which is selected when the guard bit is not set.
;;  If the guard is set and the C is not, then the multiplicand is added to
;;  the upper half of the product and the result is shifted right arithmetically
;;  one position, otherwise the product is shifted right arithmetically one
;;  position. If the guard is not set and the C is set, then the multiplicand
;;  is subtracted from the upper half of the product and the result is shifted
;;  right arithmetically one position, otherwise the product is shifted right
;;  arithmetically one position.
;;
;;  During all of these procedures, the state of the C flag representing the
;;  current lsb of the multiplier is lost. There is no convinient place to save
;;  this value of the C flag. Therefore, each of the four sub-blocks of the sub-
;;  routine restore the C flag to the value required to reach the sub-block. In
;;  manner, the C flag is appropriately re-set to the current multiplier lsb
;;  value so that it can be rotated into the msb of the multiplier register at
;;  the top of the loop.
;;
;;  Structurally, after initialization of the stack, the loop and exit are from
;;  the middle. This is done so that relative addressing can be performed in
;;  each block. If the subroutine was organized in a standard linear manner,
;;  some of the branches within the computational blocks would require absolute
;;  jumps to reach the loop start point or the exit point. That would substan-
;;  tially increase the number of cycles required to execute the subroutine.
;;
        align 8
smul8x8:
        pha                     ;; save the accumulator value

Init_P: lda #0                  ;; initialize product on stack
        pha                     ;; LSB of product
        pha                     ;; MSB of product
        pha                     ;; sign bit extension of product

Init_M: txa                     ;; initialize multiplicand on stack
        pha                     ;; push multiplicand onto stack

        asl a                   ;; generate sign extension of the multiplicand
        lda #0
        rol a                   ;; roll in multiplicand sign from C flag
        pha                     ;; push multiplicand sign extension onto stack

Init_C: lda #8                  ;; push iteration counter
        pha

        tsx                     ;; capture S in X

        clc                     ;; initialize Booth recoding guard bit

        bcc Loop                ;; Loop control and Exit in middle of routine

Add_M:  bcs Shift1              ;; Booth = 1; check multiplier lsb (C)
                                ;; C = 0
        lda $105,x              ;; Booth = 1, M[0] = 0; add-shift multiplicand
        adc $103,x              ;; add multiplicand to product[1]
        sta $105,x              ;; save new product[1]
        lda $104,x              ;; load product[2]
        adc $102,x              ;; add multiplicand sign extension, propagate C
        and #$01                ;; truncate to just sign extension bit
        sta $104,x              ;; save new product[2]

        lsr $104,x              ;; shift product right arithmetically
        bcc Nxt1                ;; if product[2].1 = 0, skip, else set sign ext
        lda #1                  ;;    restore negative sign extension
        sta $104,x              ;;    save restored sign extension in product[2]
Nxt1:   ror $105,x              ;; continue right shift
        ror $106,x              ;; continue right shift

        clc                     ;; set C to value on entry to this code seg

        dec $101,x              ;; decrement iteration counter
        bne Loop                ;; if(Cntr) loop

        bcc Exit                ;; 65C02 can use bra Exit for this instruction

Shift1: lsr $104,x              ;; shift product right arithmetically
        bcc Nxt2                ;; if product[2].1 = 0, skip, else set sign ext
        lda #1                  ;;    restore negative sign extension
        sta $104,x              ;;    save restored sign extension in product[2]
Nxt2:   ror $105,x              ;; continue right shift
        ror $106,x              ;; continue right shift

        sec                     ;; set C to value on entry to this code seg

        dec $101,x              ;; decrement iteration counter
        bne Loop                ;; if(Cntr) loop

;;        bcs Exit                ;; 65C02 can use bra Exit for this instruction

Exit:   pla                     ;; pull loop counter off stack
        pla                     ;; pull multiplicand sign extension off stack
        pla                     ;; pull multiplicand off stack

        pla                     ;; pull product sign extension off stack

        pla                     ;; pull MSB product off stack into X
        tax                     ;; 65C02 can use plx for these two instructions

        pla                     ;; pull LSB product off stack into Y
        tay                     ;; 65C02 can use ply for these two instructions

        pla                     ;; pull accumulator off the stack

        rts                     ;; exit subroutine

Loop:   tya                     ;; rotate multiplier
        ror a                   ;; Booth into M[7], M[0] into C
        tay                     ;; save for next iteration

        bmi Add_M               ;; if(positive) Sub_M else Add_M
;;        bpl Sub_M               ;; check status of Booth guard bit

Sub_M:  bcc Shift2              ;; Booth = 0; check multiplier lsb (C)
                                ;; C = 1
        lda $105,x              ;; Booth = 1, M[0] = 0; sub-shift multiplicand
        sbc $103,x              ;; sub multiplicand to product[1]
        sta $105,x              ;; save new product[1]
        lda $104,x              ;; load product[2]
        sbc $102,x              ;; sub multiplicand sign extension, propagate C
        and #$01                ;; truncate to just sign extension bit
        sta $104,x              ;; save new product[2]

        lsr $104,x              ;; shift product right arithmetically
        bcc Nxt3                ;; if product[2].1 = 0, skip, else set sign ext
        lda #1                  ;;    restore negative sign extension
        sta $104,x              ;;    save restored sign extension in product[2]
Nxt3:   ror $105,x              ;; continue right shift
        ror $106,x              ;; continue right shift

        sec

        dec $101,x              ;; decrement iteration counter
        bne Loop                ;; if(Cntr) loop

        bcs Exit                ;; 65C02 can use bra Exit for this instruction

Shift2: lsr $104,x              ;; shift product right arithmetically
        bcc Nxt4                ;; if product[2].1 = 0, skip, else set sign ext
        lda #1                  ;;    restore negative sign extension
        sta $104,x              ;;    save restored sign extension in product[2]
Nxt4:   ror $105,x              ;; continue right shift
        ror $106,x              ;; continue right shift

        clc

        dec $101,x              ;; decrement iteration counter
        bne Loop                ;; if(Cntr == 0) Exit else loop

        bcc Exit                ;; 65C02 can use bra Exit for this instruction

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
Last_Addrs:
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Vector Table
;;
Vect_Table  org     $FFFA
;;
            dw      Start       ;; NMI Interrupt Vector
            dw      Start       ;; Reset Vector
            dw      Start       ;; IRQ/BRK Interrupt Vector
;;
            end     Start
